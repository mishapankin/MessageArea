{"version":3,"sources":["BasicPlugins/PlainTextArea.js","BasicPlugins/HeaderTextArea.js","MessageArea.js","BasicPlugins/FormulaTextArea.js","App.js","serviceWorker.js","index.js"],"names":["PlainTextArea","img","type","component","props","className","onChange","event","update","target","value","HeaderTextArea","PluginList","formula_ref","React","createRef","katex","render","current","throwOnError","output","displayMode","ref","MessageArea","useState","components","setComponents","values","setValues","updateValues","ind","newValues","text","map","item","key","onClick","field","concat","length","newEl","addComponent","send","App","setText","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAkBeA,G,MAdO,CAClBC,IAAK,IACLC,KAAM,aACNC,UAAW,SAASC,GAChB,OACI,kBAAC,IAAD,CACIC,UAAU,kBACVC,SAAU,SAACC,GAAD,OAAWH,EAAMI,OAAOD,EAAME,OAAOC,aCMhDC,G,MAbQ,CACnBV,IAAK,IACLC,KAAM,SACNC,UAAW,SAASC,GAChB,OACI,kBAAC,IAAD,CACIC,UAAU,mBACVC,SAAU,SAACC,GAAD,OAAWH,EAAMI,OAAOD,EAAME,OAAOC,a,eCLzDE,G,MAAa,CACfZ,EACAW,ECFoB,CACpBV,IAAK,IACLC,KAAM,UACNC,UAAW,SAASC,GAChB,IAAMS,EAAcC,IAAMC,YAU1B,OACI,yBAAKV,UAAU,WACX,kBAAC,IAAD,CACIA,UAAU,qBACVC,SAAU,SAACC,GAAD,OAZNG,EAYwBH,EAAME,OAAOC,MAXjDN,EAAMI,OAAOE,QACbM,IAAMC,OAAOP,EAAOG,EAAYK,QAAS,CACrCC,cAAc,EACdC,OAAQ,gBACRC,aAAa,IALN,IAACX,KAcR,yBAAKY,IAAKT,EAAaR,UAAU,2BDqClCkB,MAnDf,SAAqBnB,GAAQ,IAAD,EACYoB,mBAAS,IADrB,mBACjBC,EADiB,KACLC,EADK,OAEIF,mBAAS,IAFb,mBAEjBG,EAFiB,KAETC,EAFS,KAelBC,EAAe,SAACC,EAAKpB,GACvBkB,GAAU,SAAAD,GACN,IAAII,EAAYJ,EAEhB,OADAI,EAAUD,GAAKE,KAAOtB,EACfqB,MAIf,OACA,yBAAK1B,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,gCAEPO,EAAWqB,KAAI,SAACC,EAAMJ,GAAP,OACX,0BAAMK,IAAKL,EAAKzB,UAAU,qCAAqC+B,QAAS,kBAzBvE,SAACC,GAClBX,GAAc,SAAAD,GAAU,OAAIA,EAAWa,OAAOD,EAAMlC,UAChD,CACIK,OAAQ,SAACE,GAAD,OAAWmB,EAAaJ,EAAWc,OAAQ7B,UAI3D,IAAM8B,EAAQ,CAACtC,KAAMmC,EAAMnC,KAAM8B,KAAM,IACvCJ,GAAU,SAAAD,GAAM,4BAAQA,GAAR,CAAgBa,OAiB8DC,CAAaP,KACtFA,EAAKjC,SAKtB,yBAAKI,UAAU,4BAA4B+B,QAAS,kBAAMhC,EAAMsC,KAAKf,KAArE,SAIJ,yBAAKtB,UAAU,sBAEPoB,EAAWQ,KAAI,SAACC,EAAMJ,GAAP,OACX,yBAAKK,IAAKL,EAAKzB,UAAU,6BACpB6B,SEnCVS,MAff,WAAgB,IAAD,EACanB,mBAAS,IADtB,mBACJQ,EADI,KACEY,EADF,KAEX,OAEI,yBAAKvC,UAAU,OACX,kBAAC,EAAD,CACIqC,KAAM,SAAChC,GAAD,OAAWkC,GAAQ,SAAAZ,GAAI,OAAIa,KAAKC,UAAUpC,SAEpD,6BACKsB,KCFGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31f054e6.chunk.js","sourcesContent":["import React from 'react';\nimport TextareaAutoResize from 'react-textarea-autosize';\nimport './PlainTextArea.scss';\n\nconst PlainTextArea = {\n    img: 'T',\n    type: 'plain_text',\n    component: function(props) {\n        return (\n            <TextareaAutoResize\n                className=\"plain_text_area\"\n                onChange={(event) => props.update(event.target.value)}\n            />\n        );\n    }\n}\n\n\nexport default PlainTextArea;","import React from 'react';\nimport TextareaAutoResize from 'react-textarea-autosize';\nimport './HeaderTextArea.scss';\n\nconst HeaderTextArea = {\n    img: 'H',\n    type: 'header',\n    component: function(props) {\n        return (\n            <TextareaAutoResize \n                className=\"header_text_area\"\n                onChange={(event) => props.update(event.target.value)}\n            />\n        );\n    }\n}\n\nexport default HeaderTextArea;","import React, { useState } from 'react';\nimport './MessageArea.scss';\nimport PlainTextArea from './BasicPlugins/PlainTextArea';\nimport HeaderTextArea from './BasicPlugins/HeaderTextArea';\nimport FormulaTextArea from './BasicPlugins/FormulaTextArea';\n\nconst PluginList = [\n    PlainTextArea,\n    HeaderTextArea,\n    FormulaTextArea,\n];\n\nfunction MessageArea(props) {\n    const [components, setComponents] = useState([]);\n    const [values, setValues] = useState([]);\n\n    const addComponent = (field) => {\n        setComponents(components => components.concat(field.component(\n            {\n                update: (value) => updateValues(components.length, value),\n            }\n            ))\n        );\n        const newEl = {type: field.type, text: \"\"};\n        setValues(values => [...values, newEl]);\n    }\n\n    const updateValues = (ind, value) => {\n        setValues(values => {\n            let newValues = values;\n            newValues[ind].text = value;\n            return newValues;\n        });\n    }\n\n    return (\n    <div className=\"message-area\">\n        <div className=\"message-area__panel\">\n            <div className=\"message-area__panel__buttons\">\n                {\n                    PluginList.map((item, ind) => (\n                        <span key={ind} className=\"message-area__panel__spans__button\" onClick={() => addComponent(item)}>\n                            {item.img}\n                        </span>\n                    ))\n                }\n            </div>\n            <div className=\"message-area__panel__send\" onClick={() => props.send(values)}>\n                Send\n            </div>\n        </div>\n        <div className=\"message-area__body\">\n            {\n                components.map((item, ind) => (\n                    <div key={ind} className=\"message-area__body__field\">\n                        {item}\n                    </div>\n                ))\n            }\n        </div>\n    </div>);\n}\n\nexport default MessageArea;","import React from 'react';\nimport TextareaAutoResize from 'react-textarea-autosize';\nimport './FormulaTextArea.scss';\nimport katex from 'katex/dist/katex.mjs';\nimport 'katex/dist/katex.min.css';\n\nconst FormulaTextArea = {\n    img: 'S',\n    type: 'formula',\n    component: function(props) {\n        const formula_ref = React.createRef();\n\n        const change = (value) => {\n            props.update(value);\n            katex.render(value, formula_ref.current, {\n                throwOnError: false,\n                output: \"htmlAndMathml\",\n                displayMode: true,\n            });\n        }\n        return (\n            <div className=\"formula\">\n                <TextareaAutoResize\n                    className=\"formula__text_area\"\n                    onChange={(event) => change(event.target.value)}\n                />\n                <div ref={formula_ref} className=\"formula__renderer\"/>\n            </div>\n        );\n    }\n}\n\n\nexport default FormulaTextArea;","import React, { useState } from 'react';\nimport './App.scss';\nimport './MessageArea';\nimport MessageArea from './MessageArea';\n\nfunction App() {\n    const [text, setText] = useState(\"\");\n    return (\n\n        <div className=\"App\">\n            <MessageArea\n                send={(value) => setText(text => JSON.stringify(value))}\n            />\n            <div>\n                {text}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}